{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "23f0c40e_2edb44d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-07-21T01:58:24Z",
      "side": 1,
      "message": "I think you need to link against pthreads in the library for this to work universally.",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f58adefc_fd2064aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-22T19:31:50Z",
      "side": 1,
      "message": "Hmm. I looked around online and found conflicting documentation. The general consensus seems to be that newer C++ year standards include thread support \"for free\", while older C++ standards require `-lpthread` and/or simply `-pthread`. There are legacy reasons why a separate library might be required, just like `-lm` for math functions.\n\nI think I found a way to do it correctly in Meson, so that threading dependencies will be added automatically if found, and if not found, this mutex feature will be disabled entirely (as it is not needed on a system without threading support).",
      "parentUuid": "23f0c40e_2edb44d3",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85b4f3c2_2e81ce93",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-21T04:21:44Z",
      "side": 1,
      "message": "nit: prefer you move this into the cerr function too.",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ed82d4d_9cc7bf63",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-22T19:31:50Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "85b4f3c2_2e81ce93",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d54de3_aeb68020",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-21T04:21:44Z",
      "side": 1,
      "message": "nit: std::mutex isn’t necessary here.",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35d957b7_1084f221",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-22T19:31:50Z",
      "side": 1,
      "message": "Nice, did not know that. Fixed.",
      "parentUuid": "12d54de3_aeb68020",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee4bce11_23f4ede7",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-07-21T02:00:53Z",
      "side": 1,
      "message": "Take the lock here, not earlier than needed.",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03b5fe8a_697f0c77",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-21T04:21:44Z",
      "side": 1,
      "message": "doesn’t endl do a flush?",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b25086ff_008ad04b",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-21T04:21:44Z",
      "side": 1,
      "message": "There are outputs earlier though. We need the lock before the while.",
      "parentUuid": "ee4bce11_23f4ede7",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30cbc0ac_68c98bc9",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-07-21T05:50:20Z",
      "side": 1,
      "message": "If it\u0027s anything like C, stderr is unbuffered, so every write would \"flush\" even before the `endl` (a quick search isn\u0027t finding an authoritative confirmation of that, but a few non-authoritative sources seem to agree).  So yeah, adding an explicit flush here seems redundant.",
      "parentUuid": "03b5fe8a_697f0c77",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "613a33c6_1d7d9dac",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-07-21T10:03:05Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "30cbc0ac_68c98bc9",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03fd3128_daa880e3",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-07-21T10:03:05Z",
      "side": 1,
      "message": "Right...",
      "parentUuid": "b25086ff_008ad04b",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e641c160_f3ee15eb",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-21T10:17:21Z",
      "side": 1,
      "message": "\u003e Inserts a newline character into the output sequence os and flushes it as if by calling os.put(os.widen(\u0027\\n\u0027)) followed by os.flush().\n\nhttps://en.cppreference.com/w/cpp/io/manip/endl",
      "parentUuid": "613a33c6_1d7d9dac",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20627dfe_a13dadd1",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-22T19:31:50Z",
      "side": 1,
      "message": "Nice, good to know that `std::endl` includes the effect of `std::flush` \"for free\" already, so I don\u0027t need to flush it separately here. Fixed.",
      "parentUuid": "e641c160_f3ee15eb",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22fa0605_aff8c479",
        "filename": "lib/lg2_logger.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-22T19:31:50Z",
      "side": 1,
      "message": "There are many outputs to `std::cerr` throughout this function, the lock needs to cover all of them.\n\nI thought of something. Making many separate calls to `std::cerr` seems wasteful, it would be better to build up a `stringstream` first, then write that all at once to stderr. I\u0027ll try that instead. It\u0027s faster, also!",
      "parentUuid": "03fd3128_daa880e3",
      "revId": "8f892adc7701fd84f1b0943116cb291326ff39f9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}