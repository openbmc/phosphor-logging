{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "de795b80_828e6e96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-03-29T08:59:10Z",
      "side": 1,
      "message": "There is a detailed background and description in the mailing list:\nhttps://lore.kernel.org/openbmc/CAGm54UHcnniKsN_5AyeTn6NGNGXTSv28UmpDYQ+rjug_MFSyrw@mail.gmail.com/T/#t",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bdfb8fb_5317d185",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-03-29T13:09:26Z",
      "side": 1,
      "message": "This happens before the bus name is even claimed, so when the mapper gets the nameownerchanged signal it will property introspect the object.  I\u0027m not convinced yet this is necessary.",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53ab701d_2d92172a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-03-29T15:41:12Z",
      "side": 1,
      "message": "ok, finally got caught up from vacation and read the emails.\n\nI still think that claiming a bus name after the objects are on d-bus and not emitting an interfaces added for each one is a valid thing to do, and is how PIM works as well.\n\nIt used to emit objects added, and it caused all sorts of problems because the mapper introspecting 3000 new objects that come online at once can cause other daemons making mapper calls to time out.\n\nand also, bmcweb is listening for (possibly still in review upstream) event logs to emit them as bmcweb events, and so it would re-emit event logs even though they aren\u0027t new.\n\nSo, is there a  different solution we can come up with for this?",
      "parentUuid": "1bdfb8fb_5317d185",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bac6291_92b42a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-29T17:19:20Z",
      "side": 1,
      "message": "\u003e I still think that claiming a bus name after the objects are on d-bus and not emitting an interfaces added for each one is a valid thing to do, and is how PIM works as well.\n\nYes, I agree with this.  That\u0027s exactly what daemons are suppose to do.  Add all their initial / static objects and only then claim the service name.\n\nI thought though that the object-manager doesn\u0027t actually emit the signals on the dbus until the service name is claimed and just eats them.  Is there potentially a side-effect of calling the `emit_added` that the object-manager is now aware of the interface and will _later_ emit the Removed signals?  I looked at both the `sd_bus_emit_interfaces_added_strv` and `sd_bus_emit_interfaces_removed_strv` and I don\u0027t see any side-effects like this.",
      "parentUuid": "53ab701d_2d92172a",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbc76a86_73100fb9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-03-29T17:37:52Z",
      "side": 1,
      "message": "is it just this? https://github.com/openbmc/sdbusplus/blob/master/include/sdbusplus/server/object.hpp#L215",
      "parentUuid": "1bac6291_92b42a94",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67d4ddae_7f63804b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-29T17:46:00Z",
      "side": 1,
      "message": "Yep!  That\u0027s it.\n\nSo, if I recall correctly, as long as we claim the service name after we create all the objects there is no signal emitted on the bus for the creation side and there is no harm in this commit, right?  Let me try to track down evidence of that in systemd.",
      "parentUuid": "bbc76a86_73100fb9",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9a5d9dd_aa23dec9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-03-29T18:07:13Z",
      "side": 1,
      "message": "They still are:\n\nsignal time\u003d1648577022.769102 sender\u003d:1.883 -\u003e destination\u003d(null destination) serial\u003d3 path\u003d/xyz/openbmc_project/logging; interface\u003dorg.freedesktop.DBus.ObjectManager; member\u003dInterfacesAdded\n   object path \"/xyz/openbmc_project/logging/entry/1\"\n--\nsignal time\u003d1648577022.769521 sender\u003d:1.883 -\u003e destination\u003d(null destination) serial\u003d4 path\u003d/xyz/openbmc_project/logging; interface\u003dorg.freedesktop.DBus.ObjectManager; member\u003dInterfacesAdded\n   object path \"/xyz/openbmc_project/logging/entry/3\"\n--\nsignal time\u003d1648577022.769911 sender\u003d:1.883 -\u003e destination\u003d(null destination) serial\u003d5 path\u003d/xyz/openbmc_project/logging; interface\u003dorg.freedesktop.DBus.ObjectManager; member\u003dInterfacesAdded\n   object path \"/xyz/openbmc_project/logging/entry/2\"\n--\nsignal time\u003d1648577022.771946 sender\u003dorg.freedesktop.DBus -\u003e destination\u003d(null destination) serial\u003d4294967295 path\u003d/org/freedesktop/DBus; interface\u003dorg.freedesktop.DBus; member\u003dNameOwnerChanged\n   string \"xyz.openbmc_project.Logging\"",
      "parentUuid": "67d4ddae_7f63804b",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc464063_cc98205d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-03-29T18:14:56Z",
      "side": 1,
      "message": "I can see in object.hpp how it will only emit the removed signal if it already emitted the added signal, but it won\u0027t emit the added one since we told it not to.  How about a change there to just always emit it?",
      "parentUuid": "b9a5d9dd_aa23dec9",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5eb21b3_0d31350d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-29T18:48:09Z",
      "side": 1,
      "message": "It\u0027s not really that simple either.  In some cases people use object_t to stitch together a number of interfaces and call \"emit_object_added\".  In this case we end up with the object_t destructor calling \"emit_object_removed\" and the interfaces don\u0027t send any signals on their own.\n\nI think we\u0027d need to add a new constructor parameter or secondary function in interface_t to force emit_removed on destruction.",
      "parentUuid": "bc464063_cc98205d",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "954937fe_5982d6aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-03-30T04:05:29Z",
      "side": 1,
      "message": "Is there any case that an object should NOT emit interfaces_removed and object_removed signals?\n\nIf no, probably we could just remove the check of `__sdbusplus_server_object_emitremoved` in object.hpp and `_interface_added` in interface.hpp?",
      "parentUuid": "a5eb21b3_0d31350d",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "379bbe88_d2a5a346",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-30T04:13:54Z",
      "side": 1,
      "message": "\u003e Is there any case that an object should NOT emit interfaces_removed and object_removed signals?\n\nYes, an object should never emit both.  One or the other.  They\u0027re the same signal under the covers but the \u0027emit_object_removed\u0027 does all the interfaces at that location.",
      "parentUuid": "954937fe_5982d6aa",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9054f04c_564778c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-03-30T05:22:54Z",
      "side": 1,
      "message": "OK, so it looks like we could add a method to set __sdbusplus_server_object_emitremoved to indicate an object should emit removed signal.\nThe caller shall know what it means and use it carefully.\n\nBut to re-think the case, I think we probably could remove `__sdbusplus_server_object_emitremoved` and let the object always emit removed signal.\nBecause I could not think a case why the object should not emit such signal when it\u0027s deleted. Otherwise we will hit the issue mentioned in my email.\n\n@Patrick what do you think?",
      "parentUuid": "379bbe88_d2a5a346",
      "revId": "b887e03bf230b80fb15f001c99c22512ca34cef5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}