{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "52e9102e_a6d61996",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-14T19:14:32Z",
      "side": 1,
      "message": "One can also use event log subscriptions via Redfish to get event log notifications (I don\u0027t know the exact details).",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de20cdec_10ce29e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-05-23T19:13:28Z",
      "side": 1,
      "message": "Right, that\u0027s a good and Redfish standard way. However this is not immediately useful to integrate in other bigger systems unlike the syslog protocol which is universally supported as it was in use for decades and got formally described with RFC3164 in 2009.",
      "parentUuid": "52e9102e_a6d61996",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "414e601a_75afa292",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-14T19:14:32Z",
      "side": 1,
      "message": "This is certainly ugly with all of the field duplication ...\n\nI suppose you want it in case the message from sellogger doesn\u0027t include the relevant info?",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea682ee5_edc8b8c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-05-23T19:13:28Z",
      "side": 1,
      "message": "The message from sel-logger currently is a plain text message plus a set of specific fields with values. And it\u0027s not fully duplicated, e.g. the SENSOR_PATH has more information (full path) than the text message (just the sensor name).\n\nIn any case the patch being discussed needs to include all the available information in the text string as it\u0027s just a text string that can be meaningfully passed to remote syslog (or other transports) later.\n\nUgly, yes. Does the job? I\u0027d say yes too. Do you have a more elegant way in mind?",
      "parentUuid": "414e601a_75afa292",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5afd252_761703e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-04-17T14:50:43Z",
      "side": 1,
      "message": "Thanks for the updates.\n\nSo there are multiple event log implementations today:\n\nThe original one, phosphor-logging, that uses the Logging.Entry interface on D-Bus for each entry.  And that one has 2 APIs for creating events, its original one, which which uses the journal, and the newer dbus one (see https://github.com/openbmc/phosphor-logging/blob/master/README.md#creating-event-logs-in-code)\n\nAnd then the newer one that also writes to the journal, but then has rsyslog set up to pull those out into a separate file so that redfish can get them.  In fact, I can see that can also already be used by phosphor-sel-logger: https://github.com/openbmc/phosphor-sel-logger/blob/master/include/threshold_event_monitor.hpp#L327\n\nWith whats above, there\u0027s already 2 ways event logs can already be written to the journal today.  So I don\u0027t think we can just enable this across the board, because even for people that using phosphor-logging for their event logs they would get duplicate journal entries per log when they use the original report\u003c\u003e() and commit\u003c\u003e() APIs, which a lot of older code does.  Also I heard there is a revamp coming that will make  people want to use it if they aren\u0027t already so they can get better redfish logs.\n\nAll of that being said, if this would just be hidden behind a meson option I wouldn\u0027t be against it.",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d93cef9_5524fd1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-04-22T10:30:14Z",
      "side": 1,
      "message": "Hello Matt,\n\n\u003e So there are multiple event log implementations today:\n\nAs far as I can tell we have just two _mutually exclusive_ ways to get SEL records exposed via Redfish.\n\nThe bmcweb Meson `redfish-dbus-log` option enables either https://github.com/openbmc/bmcweb/blob/master/redfish-core/src/redfish.cpp#L129 the clumsy method of reading from `/var/log/redfish` generated by special company-specific rsyslog configuration such as https://github.com/openbmc/openbmc/blob/5b33e7a86d459dde90a4b4d9f50c121f7932e95e/meta-facebook/recipes-extended/rsyslog/rsyslog/rsyslog.conf#L48 or the OpenBMC documented (in phosphor-dbus-interfaces) D-Bus SEL API https://github.com/openbmc/bmcweb/blob/master/redfish-core/src/redfish.cpp#L167 , not both at the same time.\n\nThe phosphor-sel-logger option `send-to-logger` is also choosing between two distinct methods of logging events: https://github.com/openbmc/phosphor-sel-logger/blob/master/src/sel_logger.cpp#L204 , again, it either generates a Journal entry with the special `REDFISH_MESSAGE_ID` field or it sends it to OpenBMC logger service, and never both. Same about the other daemons that write SEL entries, they all either specify explicit `REDFISH_MESSAGE_ID` field in systemd journal or they tell the logger (via D-Bus or by throwing an exception and \"commiting\" it) to create an entry in the D-Bus interface.\n\n\u003e With whats above, there\u0027s already 2 ways event logs can already be written to the journal today.  So I don\u0027t think we can just enable this across the board, because even for people that using phosphor-logging for their event logs they would get duplicate journal entries per log when they use the original report\u003c\u003e() and commit\u003c\u003e() APIs, which a lot of older code does. \n\nWhen report/commit API is used the journal entry is created (without REDFISH_MESSAGE_ID!) and the current patch I\u0027m proposing is NOT coming into play at all because `Manager::_commit()` is called and `Manager::create()` (which I extend) isn\u0027t. When the D-Bus API is used the `Manager::create()` function is called as a handler and before this patch it didn\u0027t add anything at all to the journal.\n\nWhen any way to create a journal entry with REDFISH_MESSAGE_ID is used (be it `lg2::log\u003c\u003e` or `sd_journal_send`) the phosphor-logging daemon does nothing and no D-Bus entry is created at all.\n\n\u003e All of that being said, if this would just be hidden behind a meson option I wouldn\u0027t be against it.\n\nSo far I fail to see when it might be needed. Can you please outline a specific set of configuration options and events which would lead to duplicated entries anywhere? I might be missing some details so I outlined my current understanding in the hopes you can pinpoint something particular in it which is wrong (if anything is indeed wrong or missing). Thank you.",
      "parentUuid": "e5afd252_761703e1",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78ea9141_6c2a37ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-05-13T08:41:28Z",
      "side": 1,
      "message": "Hello Matt,\n\nPlease do not let this one slip through the cracks again, if there\u0027s something wrong about my understanding please help me see it so we can continue with the cleanest way possible.",
      "parentUuid": "8d93cef9_5524fd1d",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0646694f_fabebd67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-14T19:16:16Z",
      "side": 1,
      "message": "Would it be worth holding off on this for say 1-2 weeks?  I\u0027m finishing up a design for a revamped error and event logging design.",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90a785be_150ad8d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-26T22:07:33Z",
      "side": 1,
      "message": "We\u0027re at least going to make this an option, right?",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bd7b609_4cd3cd41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-26T22:14:33Z",
      "side": 1,
      "message": "\u003e We\u0027re at least going to make this an option, right?\n\nThere\u0027s no option (and there can not be given the current way it\u0027s architectured) to avoid including in the system journal the SEL entries generated by the recommended method of exception throwing of `phosphor-dbus-interfaces` documented objects, right? So why ad-hoc SELs generated with a D-Bus call should be any different?",
      "parentUuid": "90a785be_150ad8d1",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "480d3b36_7e232187",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-26T22:34:54Z",
      "side": 1,
      "message": "(I marked this as -2 only because Matt gave it a +2 and I didn\u0027t want it merged yet; I made mention before that I was working on the improved design, which is since up, but I didn\u0027t see any follow up from you on this remark.)",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3805924_1481d2fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-06-26T22:34:54Z",
      "side": 1,
      "message": "\u003e There\u0027s no option (and there can not be given the current way it\u0027s architectured) to avoid including in the system journal the SEL entries generated by the recommended method of exception throwing of phosphor-dbus-interfaces documented objects, right?\n\nThese don\u0027t go to the journal afaik.  Parts of them do because the journal is currently used as the \"IPC channel\" to phosphor-logging.  The design document I pointed to is working to eliminate this.\n\n\u003e So why ad-hoc SELs generated with a D-Bus call should be any different?\n\nTo avoid the noise for people who don\u0027t want it.  With the yosemite4 platform and a 10MB space for the journal, I already can\u0027t even capture all of the BMC startup content in the journal.  I don\u0027t want to make that situation worse.",
      "parentUuid": "1bd7b609_4cd3cd41",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50a7e366_d604ff84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-26T22:52:52Z",
      "side": 1,
      "message": "\u003e (I marked this as -2 only because Matt gave it a +2 and I didn\u0027t want it merged yet; I made mention before that I was working on the improved design, which is since up, but I didn\u0027t see any follow up from you on this remark.)\n\nNP, the intent behind -2 is clear. I wasn\u0027t aware the design document was since posted, hence no follow up, I hoped Matt would update me here if the situation changes.",
      "parentUuid": "480d3b36_7e232187",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32e9fe86_e3ea907e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-26T22:52:52Z",
      "side": 1,
      "message": "\u003e \u003e There\u0027s no option (and there can not be given the current way it\u0027s architectured) to avoid including in the system journal the SEL entries generated by the recommended method of exception throwing of phosphor-dbus-interfaces documented objects, right?\n\u003e \n\u003e These don\u0027t go to the journal afaik.  Parts of them do because the journal is currently used as the \"IPC channel\" to phosphor-logging. \n\nYes, that\u0027s what I meant, the journal entries are unavoidable when using the exceptions method with the code as it currently is because the journal is used as IPC.\n\n\u003e The design document I pointed to is working to eliminate this.\n\nGood to know. So there\u0027s going to be a generic switch for all SELs to go or not go to the journal, no matter how exactly generated, right? I\u0027ll happily hook up the code in this patch into it.\n\n\u003e \u003e So why ad-hoc SELs generated with a D-Bus call should be any different?\n\u003e \n\u003e To avoid the noise for people who don\u0027t want it.  With the yosemite4 platform and a 10MB space for the journal, I already can\u0027t even capture all of the BMC startup content in the journal.  I don\u0027t want to make that situation worse.\n\nHm, I never thought those messages there were undesired, a harmful side effect. I see how it makes sense then.\n\nHowever please note how this very phosphor-logging repository has means to configure remote syslog destinations and they\u0027re hooked into Redfish and I think people expect to receive all the SELs when that feature is used. So I guess that flag that disables sending to journal should also disable the possibility to add remote syslog destinations?",
      "parentUuid": "b3805924_1481d2fc",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bbfa754_48c8876f",
        "filename": "log_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 631,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-14T19:14:32Z",
      "side": 1,
      "message": "I think this should have a meson option to enable it, and would prefer it default to disabled.\n\nAs of now there\u0027s pretty much no chance my systems would ever use rsyslog functionality to scrape event logs, so would rather not have these take up space in the journal.  Also, some event logs have fairly large additional data properties that would be a mess to have to deal with when trying to manually debug using the journal.",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e30d4037_a59931c9",
        "filename": "log_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 631,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-05-23T19:13:28Z",
      "side": 1,
      "message": "\u003e I think this should have a meson option to enable it, and would prefer it default to disabled.\n\nHow about this angle: this patch fixes a regression. Before https://github.com/openbmc/phosphor-sel-logger/commit/6f5342d0bdb2b2b8c52323219656f88794abf54f all SEL messages were forwarded to remote syslog server configured via standard Redfish calls using rsyslog configuration generated by this very `phosphor-logging` project: https://github.com/openbmc/phosphor-logging/blob/master/phosphor-rsyslog-config/server-conf.hpp#L93 . Now since some services switched from throwing an exception and committing it to logger the OpenBMC functionality provided by webui-vue + bmcweb + phosphor-rsyslog-conf (part of phosphor-logging) broke.\n\nIs it really a good idea to leave the fix disabled by default?\n\n\u003e As of now there\u0027s pretty much no chance my systems would ever use rsyslog functionality to scrape event logs, so would rather not have these take up space in the journal.\n\nBut all the other modern event reporting methods for phosphor-logging go via the journal and take up the space there. And what if phosphor-dbus-interfaces is properly expanded to provide a suitable type for SEL events and phosphor-sel-logger switches back to `report\u003cSELCreated\u003e`?\n\nI do not see why you want to treat those cases differently. Your system do not need rsyslog, ok, but some other systems rely on functionality provided by it. And it\u0027s part of Redfish.\n\nCurrent state is just semi-broken, some messages get sent properly (those generated by throwing exception), some remain available only via D-Bus and Redfish. I can\u0027t see why you insist on keeping it this way. I\u0027d say either all messages should be in the journal or none.\n\n\u003e Also, some event logs have fairly large additional data properties that would be a mess to have to deal with when trying to manually debug using the journal.\n\nI just checked, on Ubuntu journalctl uses `less` for paging with parameter `-S` which means \"Causes  lines longer than the screen width to be chopped (truncated) rather than wrapped\" by default. And some messages are indeed long but apparently sysadmins got used to it by now. OpenBMC less supports the -S option too so I can not see how additional data properties are going to make debugging problematic.",
      "parentUuid": "4bbfa754_48c8876f",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b396787d_4e19bf68",
        "filename": "log_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 631,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-26T11:05:27Z",
      "side": 1,
      "message": "Ping, it\u0027s been more than a whole month now. I think I answered all current questions and provided good rationale, please tell what\u0027s missing.",
      "parentUuid": "e30d4037_a59931c9",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9917297e_5740ed51",
        "filename": "log_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 631,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-06-26T22:04:28Z",
      "side": 1,
      "message": "\u003e I\u0027d say either all messages should be in the journal or none.\nI suppose that\u0027s fair.  \n\nI was hoping someone else in the community would chime in here, but doesn\u0027t seem like that\u0027s going to happen.",
      "parentUuid": "b396787d_4e19bf68",
      "revId": "3a60f58e66abe5baa4fcb4e4f513a15fefb2c1ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}